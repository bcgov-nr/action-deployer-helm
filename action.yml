name: Helm Deployer
description: Helm wrapper with route verification or penetration testing
branding:
  icon: package
  color: blue

inputs:
  ### Required
  namespace:
    description: OpenShift or Kubernetes namespace (e.g. abc123-dev)
    required: true
  server:
    description: OpenShift or Kubernetes server (e.g. https://api.silver.devops.gov.bc.ca:6443)
    required: true
  token:
    description: OpenShift or Kubernetes access token
    required: true
  chart-file: 
    description: A Helm Chart.yaml describing the application 
    required: true
  values-file:
    descrption: A Helm values.yaml file decorating the application
    required: true
  
  ### Typical / recommended
  penetration_test:
    description: Run a ZAProxy penetration test against any routes? [true/false]
    default: "false"
  penetration_test_fail:
    description: Allow ZAProxy alerts to fail the workflow? [true/false]
    default: "false"
  penetration_test_issue:
    description: Provide a name to enable ZAProxy issue creation; e.g. frontend, backend
    default: ""

  ### Optional / not usually required
  command:
    description: Optionally, do something other than upgrade
    default: "upgrade --install --atomic --debug"
  release:
    description: Helm release
    default: "${{ github.event.repository.name }}-${{ github.event.number }}"

runs:
  using: composite
  steps:
    # Clone, for charts
    - uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}

      shell: bash
      run: |
        # Login to OpenShift/Kubernetes (NOTE: project command is a safeguard)
        oc login --token=${{ inputs.token }} --server=${{ inputs.server }}
        oc project ${{ inputs.namespace }}

      shell: bash
      run: |
        helm ${{ inputs.command }} ${{ inputs.release }} ${{ inputs.chart-file }} -f ${{ inputs.values-file }} \
          | sed '/^kind: Secret/,/^---/{//!d}' | sed '/^kind: Secret/ s/$/ \n  <REDACTED>/'

    - name: Penetration Test
      if: inputs.penetration_test == 'true' 
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: https://${{ steps.vars.outputs.url }}
        cmd_options: "-a"
        fail_action: ${{ inputs.penetration_test_fail }}
        # allow_... is purposefully obscured - if a title is provided, then = true
        allow_issue_writing: ${{ inputs.penetration_test_issue && true || false }}
        issue_title: "ZAP: ${{ inputs.penetration_test_issue }}"

    # Action repo needs to be present for cleanup/tests
    - name: Checkout to make sure action.yml is present (tests)
      if: ${{ github.repository }} != ${{ inputs.repository }}
      uses: actions/checkout@v3
